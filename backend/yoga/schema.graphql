# import * from '../prisma/prisma.graphql'

enum VOTE_TYPES {
    UP_VOTE
    DOWN_VOTE
}

type Comment {
    id: ID!
    body: String!
    post: Post!
    createdAt: DateTime!
    updatedAt: DateTime!
    author: User!
    own: Boolean!
}

type Post {
    id: ID!
    title: String!
    url: String!
    comments(
        where: CommentWhereInput
        orderBy: CommentOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [Comment!]
    createdAt: DateTime!
    updatedAt: DateTime!
    author: User!
    upVotes(
        where: UserWhereInput
        orderBy: UserOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [User!]
    downVotes(
        where: UserWhereInput
        orderBy: UserOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [User!]
    own: Boolean!
}

type User {
    id: ID!
    name: String!
    username: String!
    email: String!
    posts: [Post]!
    comments: [Comment]!
    upVotes: [Post!]!
    downVotes: [Post!]!
}

type Mutation {
    # Post
    createPost(title: String!, url: String!): Post!
    updatePost(data: PostUpdateInput!, id: ID!): Post
    deletePost(id: ID!): Post

    # Comment
    createComment(body: String!, postId: ID!): Comment!
    updateComment(data: CommentUpdateInput!, id: ID!): Comment
    deleteComment(id: ID!): Comment

    ## Auth
    signup(
        name: String!
        username: String!
        email: String!
        password: String!
    ): User!

    signin(user: String!, password: String!): User!
    logout: Boolean!

    createVote(type: VOTE_TYPES, postId: ID!): Post!
}

type Query {
    comment(where: CommentWhereUniqueInput!): Comment
    comments(
        where: CommentWhereInput
        orderBy: CommentOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [Comment]!
    commentsConnection(
        where: CommentWhereInput
        orderBy: CommentOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): CommentConnection!
    post(where: PostWhereUniqueInput!): Post
    posts(
        where: PostWhereInput
        orderBy: PostOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): [Post]!
    postsConnection(
        where: PostWhereInput
        orderBy: PostOrderByInput
        skip: Int
        after: String
        before: String
        first: Int
        last: Int
    ): PostConnection!

    me: User
}
