type AggregateComment {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  body: String!
  post: Post!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  body: String!
  post: PostCreateOneWithoutCommentsInput!
  author: UserCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
  id: ID
  body: String!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutPostInput {
  id: ID
  body: String!
  author: UserCreateOneWithoutCommentsInput!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  body_ASC
  body_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  body: String
  post: PostUpdateOneRequiredWithoutCommentsInput
  author: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  body: String
}

input CommentUpdateManyMutationInput {
  body: String
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutAuthorDataInput {
  body: String
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutPostDataInput {
  body: String
  author: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  author: UserWhereInput
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  url: String!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  upVotes(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  downVotes(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  url: String!
  comments: CommentCreateManyWithoutPostInput
  author: UserCreateOneWithoutPostsInput!
  upVotes: UserCreateManyWithoutUpVotesInput
  downVotes: UserCreateManyWithoutDownVotesInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutDownVotesInput {
  create: [PostCreateWithoutDownVotesInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutUpVotesInput {
  create: [PostCreateWithoutUpVotesInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  id: ID
  title: String!
  url: String!
  comments: CommentCreateManyWithoutPostInput
  upVotes: UserCreateManyWithoutUpVotesInput
  downVotes: UserCreateManyWithoutDownVotesInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  title: String!
  url: String!
  author: UserCreateOneWithoutPostsInput!
  upVotes: UserCreateManyWithoutUpVotesInput
  downVotes: UserCreateManyWithoutDownVotesInput
}

input PostCreateWithoutDownVotesInput {
  id: ID
  title: String!
  url: String!
  comments: CommentCreateManyWithoutPostInput
  author: UserCreateOneWithoutPostsInput!
  upVotes: UserCreateManyWithoutUpVotesInput
}

input PostCreateWithoutUpVotesInput {
  id: ID
  title: String!
  url: String!
  comments: CommentCreateManyWithoutPostInput
  author: UserCreateOneWithoutPostsInput!
  downVotes: UserCreateManyWithoutDownVotesInput
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  url: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  url: String
  comments: CommentUpdateManyWithoutPostInput
  author: UserUpdateOneRequiredWithoutPostsInput
  upVotes: UserUpdateManyWithoutUpVotesInput
  downVotes: UserUpdateManyWithoutDownVotesInput
}

input PostUpdateManyDataInput {
  title: String
  url: String
}

input PostUpdateManyMutationInput {
  title: String
  url: String
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutDownVotesInput {
  create: [PostCreateWithoutDownVotesInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutDownVotesInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutDownVotesInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutUpVotesInput {
  create: [PostCreateWithoutUpVotesInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUpVotesInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUpVotesInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  url: String
  comments: CommentUpdateManyWithoutPostInput
  upVotes: UserUpdateManyWithoutUpVotesInput
  downVotes: UserUpdateManyWithoutDownVotesInput
}

input PostUpdateWithoutCommentsDataInput {
  title: String
  url: String
  author: UserUpdateOneRequiredWithoutPostsInput
  upVotes: UserUpdateManyWithoutUpVotesInput
  downVotes: UserUpdateManyWithoutDownVotesInput
}

input PostUpdateWithoutDownVotesDataInput {
  title: String
  url: String
  comments: CommentUpdateManyWithoutPostInput
  author: UserUpdateOneRequiredWithoutPostsInput
  upVotes: UserUpdateManyWithoutUpVotesInput
}

input PostUpdateWithoutUpVotesDataInput {
  title: String
  url: String
  comments: CommentUpdateManyWithoutPostInput
  author: UserUpdateOneRequiredWithoutPostsInput
  downVotes: UserUpdateManyWithoutDownVotesInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpdateWithWhereUniqueWithoutDownVotesInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutDownVotesDataInput!
}

input PostUpdateWithWhereUniqueWithoutUpVotesInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUpVotesDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostUpsertWithWhereUniqueWithoutDownVotesInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutDownVotesDataInput!
  create: PostCreateWithoutDownVotesInput!
}

input PostUpsertWithWhereUniqueWithoutUpVotesInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUpVotesDataInput!
  create: PostCreateWithoutUpVotesInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  author: UserWhereInput
  upVotes_every: UserWhereInput
  upVotes_some: UserWhereInput
  upVotes_none: UserWhereInput
  downVotes_every: UserWhereInput
  downVotes_some: UserWhereInput
  downVotes_none: UserWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  username: String!
  email: String!
  password: String!
  emailVarificationToken: String
  passwordResetToken: String
  passwordResetTokenExpiration: String
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  upVotes(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  downVotes(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  username: String!
  email: String!
  password: String!
  emailVarificationToken: String
  passwordResetToken: String
  passwordResetTokenExpiration: String
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  upVotes: PostCreateManyWithoutUpVotesInput
  downVotes: PostCreateManyWithoutDownVotesInput
}

input UserCreateManyWithoutDownVotesInput {
  create: [UserCreateWithoutDownVotesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUpVotesInput {
  create: [UserCreateWithoutUpVotesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  name: String!
  username: String!
  email: String!
  password: String!
  emailVarificationToken: String
  passwordResetToken: String
  passwordResetTokenExpiration: String
  posts: PostCreateManyWithoutAuthorInput
  upVotes: PostCreateManyWithoutUpVotesInput
  downVotes: PostCreateManyWithoutDownVotesInput
}

input UserCreateWithoutDownVotesInput {
  id: ID
  name: String!
  username: String!
  email: String!
  password: String!
  emailVarificationToken: String
  passwordResetToken: String
  passwordResetTokenExpiration: String
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  upVotes: PostCreateManyWithoutUpVotesInput
}

input UserCreateWithoutPostsInput {
  id: ID
  name: String!
  username: String!
  email: String!
  password: String!
  emailVarificationToken: String
  passwordResetToken: String
  passwordResetTokenExpiration: String
  comments: CommentCreateManyWithoutAuthorInput
  upVotes: PostCreateManyWithoutUpVotesInput
  downVotes: PostCreateManyWithoutDownVotesInput
}

input UserCreateWithoutUpVotesInput {
  id: ID
  name: String!
  username: String!
  email: String!
  password: String!
  emailVarificationToken: String
  passwordResetToken: String
  passwordResetTokenExpiration: String
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  downVotes: PostCreateManyWithoutDownVotesInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  emailVarificationToken_ASC
  emailVarificationToken_DESC
  passwordResetToken_ASC
  passwordResetToken_DESC
  passwordResetTokenExpiration_ASC
  passwordResetTokenExpiration_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  username: String!
  email: String!
  password: String!
  emailVarificationToken: String
  passwordResetToken: String
  passwordResetTokenExpiration: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  emailVarificationToken: String
  emailVarificationToken_not: String
  emailVarificationToken_in: [String!]
  emailVarificationToken_not_in: [String!]
  emailVarificationToken_lt: String
  emailVarificationToken_lte: String
  emailVarificationToken_gt: String
  emailVarificationToken_gte: String
  emailVarificationToken_contains: String
  emailVarificationToken_not_contains: String
  emailVarificationToken_starts_with: String
  emailVarificationToken_not_starts_with: String
  emailVarificationToken_ends_with: String
  emailVarificationToken_not_ends_with: String
  passwordResetToken: String
  passwordResetToken_not: String
  passwordResetToken_in: [String!]
  passwordResetToken_not_in: [String!]
  passwordResetToken_lt: String
  passwordResetToken_lte: String
  passwordResetToken_gt: String
  passwordResetToken_gte: String
  passwordResetToken_contains: String
  passwordResetToken_not_contains: String
  passwordResetToken_starts_with: String
  passwordResetToken_not_starts_with: String
  passwordResetToken_ends_with: String
  passwordResetToken_not_ends_with: String
  passwordResetTokenExpiration: String
  passwordResetTokenExpiration_not: String
  passwordResetTokenExpiration_in: [String!]
  passwordResetTokenExpiration_not_in: [String!]
  passwordResetTokenExpiration_lt: String
  passwordResetTokenExpiration_lte: String
  passwordResetTokenExpiration_gt: String
  passwordResetTokenExpiration_gte: String
  passwordResetTokenExpiration_contains: String
  passwordResetTokenExpiration_not_contains: String
  passwordResetTokenExpiration_starts_with: String
  passwordResetTokenExpiration_not_starts_with: String
  passwordResetTokenExpiration_ends_with: String
  passwordResetTokenExpiration_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  username: String
  email: String
  password: String
  emailVarificationToken: String
  passwordResetToken: String
  passwordResetTokenExpiration: String
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  upVotes: PostUpdateManyWithoutUpVotesInput
  downVotes: PostUpdateManyWithoutDownVotesInput
}

input UserUpdateManyDataInput {
  name: String
  username: String
  email: String
  password: String
  emailVarificationToken: String
  passwordResetToken: String
  passwordResetTokenExpiration: String
}

input UserUpdateManyMutationInput {
  name: String
  username: String
  email: String
  password: String
  emailVarificationToken: String
  passwordResetToken: String
  passwordResetTokenExpiration: String
}

input UserUpdateManyWithoutDownVotesInput {
  create: [UserCreateWithoutDownVotesInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutDownVotesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutDownVotesInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutUpVotesInput {
  create: [UserCreateWithoutUpVotesInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutUpVotesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutUpVotesInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCommentsDataInput {
  name: String
  username: String
  email: String
  password: String
  emailVarificationToken: String
  passwordResetToken: String
  passwordResetTokenExpiration: String
  posts: PostUpdateManyWithoutAuthorInput
  upVotes: PostUpdateManyWithoutUpVotesInput
  downVotes: PostUpdateManyWithoutDownVotesInput
}

input UserUpdateWithoutDownVotesDataInput {
  name: String
  username: String
  email: String
  password: String
  emailVarificationToken: String
  passwordResetToken: String
  passwordResetTokenExpiration: String
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  upVotes: PostUpdateManyWithoutUpVotesInput
}

input UserUpdateWithoutPostsDataInput {
  name: String
  username: String
  email: String
  password: String
  emailVarificationToken: String
  passwordResetToken: String
  passwordResetTokenExpiration: String
  comments: CommentUpdateManyWithoutAuthorInput
  upVotes: PostUpdateManyWithoutUpVotesInput
  downVotes: PostUpdateManyWithoutDownVotesInput
}

input UserUpdateWithoutUpVotesDataInput {
  name: String
  username: String
  email: String
  password: String
  emailVarificationToken: String
  passwordResetToken: String
  passwordResetTokenExpiration: String
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  downVotes: PostUpdateManyWithoutDownVotesInput
}

input UserUpdateWithWhereUniqueWithoutDownVotesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutDownVotesDataInput!
}

input UserUpdateWithWhereUniqueWithoutUpVotesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutUpVotesDataInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithWhereUniqueWithoutDownVotesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutDownVotesDataInput!
  create: UserCreateWithoutDownVotesInput!
}

input UserUpsertWithWhereUniqueWithoutUpVotesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutUpVotesDataInput!
  create: UserCreateWithoutUpVotesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  emailVarificationToken: String
  emailVarificationToken_not: String
  emailVarificationToken_in: [String!]
  emailVarificationToken_not_in: [String!]
  emailVarificationToken_lt: String
  emailVarificationToken_lte: String
  emailVarificationToken_gt: String
  emailVarificationToken_gte: String
  emailVarificationToken_contains: String
  emailVarificationToken_not_contains: String
  emailVarificationToken_starts_with: String
  emailVarificationToken_not_starts_with: String
  emailVarificationToken_ends_with: String
  emailVarificationToken_not_ends_with: String
  passwordResetToken: String
  passwordResetToken_not: String
  passwordResetToken_in: [String!]
  passwordResetToken_not_in: [String!]
  passwordResetToken_lt: String
  passwordResetToken_lte: String
  passwordResetToken_gt: String
  passwordResetToken_gte: String
  passwordResetToken_contains: String
  passwordResetToken_not_contains: String
  passwordResetToken_starts_with: String
  passwordResetToken_not_starts_with: String
  passwordResetToken_ends_with: String
  passwordResetToken_not_ends_with: String
  passwordResetTokenExpiration: String
  passwordResetTokenExpiration_not: String
  passwordResetTokenExpiration_in: [String!]
  passwordResetTokenExpiration_not_in: [String!]
  passwordResetTokenExpiration_lt: String
  passwordResetTokenExpiration_lte: String
  passwordResetTokenExpiration_gt: String
  passwordResetTokenExpiration_gte: String
  passwordResetTokenExpiration_contains: String
  passwordResetTokenExpiration_not_contains: String
  passwordResetTokenExpiration_starts_with: String
  passwordResetTokenExpiration_not_starts_with: String
  passwordResetTokenExpiration_ends_with: String
  passwordResetTokenExpiration_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  upVotes_every: PostWhereInput
  upVotes_some: PostWhereInput
  upVotes_none: PostWhereInput
  downVotes_every: PostWhereInput
  downVotes_some: PostWhereInput
  downVotes_none: PostWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
